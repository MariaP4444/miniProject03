; OM File Header - Saved 2024/09/26 21:30:57
; (7.03 :patc (om-make-point 105 124) (om-make-point -7 0) (om-make-point 766 860) "" 183 0 "2024/09/26 21:12:33" "2024/09/26 21:24:45")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"compas.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "line4" (quote ((let ((box (om-load-boxcall (quote bastype) "list 13" (quote list) (quote nil) (om-make-point 657 400) (om-make-point 94 28) (list 1 1 1 -1 1 1 -1) "(1 1 1 -1 1 1 -1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 12" (quote list) (quote nil) (om-make-point 483 449) (om-make-point 64 28) (list -1 1 1 -1) "(-1 1 1 -1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 11" (quote list) (quote nil) (om-make-point 103 413) (om-make-point 84 28) (list 1 1 -1 2 2 -1) "(1 1 -1 2 2 -1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 44 319) (om-make-point 79 28) (list 2 2 -1 -1 -1) "(2 2 -1 -1 -1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 661 136) (om-make-point 128 28) (list 1200 1200 1200 1200) "(1200 1200 1200 1200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 483 27) (om-make-point 240 28) (list 1200 1200 1200 1200 1200 1200 1200 1200) "(1200 1200 1200 1200 1200 1200 1200 1200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 534 98) (om-make-point 156 28) (list 1200 1200 1200 1200 1200) "(1200 1200 1200 1200 1200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 436 209) (om-make-point 25 28) (list 4) "(4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 375 258) (om-make-point 35 28) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 584 216) (om-make-point 142 28) (list (list (quote e3) (quote a3) (quote c4)) nil (list (quote e3) (quote c4)) nil) "((E3 A3 C4) () (E3 C4) ())" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 258 95) (om-make-point 144 28) (list (list (quote c3) (quote g3) (quote c4)) nil (list (quote c3) (quote c4)) nil) "((C3 G3 C4) () (C3 C4) ())" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 524 291) (om-make-point 92 28) (list nil nil (list (quote b4)) (list (quote b4))) "(() () (B4) (B4))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 139 113) (om-make-point 97 28) (list (list (quote c5) (quote g5)) nil nil nil) "((C5 G5) () () ())" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 222 640) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CONCAT" (quote concat) (quote ((om-load-inputfun (quote input-funbox) "a musical sequence" "S1" nil) (om-load-inputfun (quote input-funbox) "a musical sequence" "S2" nil))) (om-make-point 243 447) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "compas 2" (quote ("elements" "compas")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil) (om-load-inputfun (quote input-funbox) "" "input 5" nil) (om-load-inputfun (quote input-funbox) "" "input 6" nil) (om-load-inputfun (quote input-funbox) "" "input 7" nil) (om-load-inputfun (quote input-funbox) "" "input 8" nil) (om-load-inputfun (quote input-funbox) "" "input 9" nil) (om-load-inputfun (quote input-funbox) "" "input 10" nil))) (om-make-point 552 498) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "compas" (quote ("elements" "compas")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil) (om-load-inputfun (quote input-funbox) "" "input 5" nil) (om-load-inputfun (quote input-funbox) "" "input 6" nil) (om-load-inputfun (quote input-funbox) "" "input 7" nil) (om-load-inputfun (quote input-funbox) "" "input 8" nil) (om-load-inputfun (quote input-funbox) "" "input 9" nil) (om-load-inputfun (quote input-funbox) "" "input 10" nil))) (om-make-point 154 235) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((14 0 13 0 nil 0) (16 0 14 0 nil 0) (15 0 14 1 nil 0) (1 0 15 0 nil 0) (11 0 15 1 nil 0) (4 0 15 2 nil 0) (7 0 15 3 nil 0) (8 0 15 4 nil 0) (0 0 15 5 nil 0) (9 0 15 6 nil 0) (5 0 15 7 nil 0) (7 0 15 8 nil 0) (8 0 15 9 nil 0) (3 0 16 0 nil 0) (12 0 16 1 nil 0) (6 0 16 2 nil 0) (7 0 16 3 nil 0) (8 0 16 4 nil 0) (2 0 16 5 nil 0) (10 0 16 6 nil 0) (5 0 16 7 nil 0) (7 0 16 8 nil 0) (8 0 16 9 nil 0))) nil 7.03))
