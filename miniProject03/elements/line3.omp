; OM File Header - Saved 2024/09/26 21:30:57
; (7.03 :patc (om-make-point 170 110) (om-make-point -7 0) (om-make-point 766 840) "" 183 0 "2024/09/26 20:51:01" "2024/09/26 21:11:12")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"compas.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "line3" (quote ((let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 391 738) (om-make-point 300 117) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (? (((4 4) (1 -3)) ((4 4) (1 -1)) ((4 4) (1 -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (? (((4 4) ((1 (1 -1)) -3)) ((4 4) (1)) ((4 4) ((1 (1 -1)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4100 4500)) :ldur (quote (500 500)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500 5300)) :ldur (quote (4000 4000)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100 4500)) :ldur (quote (500 500)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.03 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 0 (om-make-point -8 -8) (om-make-point 1536 869) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (2 2 2))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote g)) 24 2)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 18" (quote list) (quote nil) (om-make-point 488 64) (om-make-point 55 28) (list 1 1 1 1) "(1 1 1 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 17" (quote list) (quote nil) (om-make-point 241 279) (om-make-point 68 28) (list 1 1 -1 -1) "(1 1 -1 -1 )" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 16" (quote list) (quote nil) (om-make-point 174 119) (om-make-point 25 28) (list 4) "(4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 15" (quote list) (quote nil) (om-make-point 146 172) (om-make-point 64 28) (list 2 -1 -1 1) "(2 -1 -1 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 14" (quote list) (quote nil) (om-make-point 151 600) (om-make-point 77 28) (list 1/8 1/8 1 1) "(1/8 1/8 1 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 13" (quote list) (quote nil) (om-make-point 33 69) (om-make-point 25 28) (list 1) "(1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 12" (quote list) (quote nil) (om-make-point 527 305) (om-make-point 184 28) (list 1200 1200 1200 1200 1200 1200) "(1200 1200 1200 1200 1200 1200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 11" (quote list) (quote nil) (om-make-point 498 579) (om-make-point 128 28) (list 1200 1200 1200 1200) "(1200 1200 1200 1200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 126 522) (om-make-point 170 28) (list 1200 1200 1200 1200 1200) "(1200 1200 1200  1200 1200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 0 216) (om-make-point 119 28) (list 1/4 1/4 1/4 1/8 1/8) "(1/4 1/4 1/4 1/8 1/8)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 329 289) (om-make-point 124 28) (list (list (quote f2) (quote a2)) (list (quote a2) (quote f3)) nil nil) "((F2 A2) (A2 F3) () ())" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 304 237) (om-make-point 95 28) (list (list (quote a2) (quote f3)) nil nil nil) "((A2 F3) () () ())" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 16 309) (om-make-point 124 28) (list (list (quote f2) (quote a2)) (list (quote a2) (quote f3)) nil nil) "((F2 A2) (A2 F3) () ())" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 346 111) (om-make-point 35 28) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 564 42) (om-make-point 79 28) (list (list (quote a5)) nil nil nil) "((A5) () () ())" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 366 24) (om-make-point 119 28) (list (list (quote f5)) (list (quote d5)) (list (quote b4)) (list (quote a4))) "((F5) (D5) (B4) (A4))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 226 8) (om-make-point 92 28) (list (list (quote a5)) nil nil (list (quote a5))) "((A5) () () (A5))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 69 38) (om-make-point 137 28) (list (list (quote d6)) (list (quote b5)) (list (quote g5)) (list (quote e5) (quote a5))) "((D6) (B5) (G5) (E5 A5))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 304 702) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CONCAT 3" (quote concat) (quote ((om-load-inputfun (quote input-funbox) "a musical sequence" "S1" nil) (om-load-inputfun (quote input-funbox) "a musical sequence" "S2" nil))) (om-make-point 314 453) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CONCAT 2" (quote concat) (quote ((om-load-inputfun (quote input-funbox) "a musical sequence" "S1" nil) (om-load-inputfun (quote input-funbox) "a musical sequence" "S2" nil))) (om-make-point 455 270) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CONCAT" (quote concat) (quote ((om-load-inputfun (quote input-funbox) "a musical sequence" "S1" nil) (om-load-inputfun (quote input-funbox) "a musical sequence" "S2" nil))) (om-make-point 176 257) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "compas 4" (quote ("elements" "compas")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil) (om-load-inputfun (quote input-funbox) "" "input 5" nil) (om-load-inputfun (quote input-funbox) "" "input 6" nil) (om-load-inputfun (quote input-funbox) "" "input 7" nil) (om-load-inputfun (quote input-funbox) "" "input 8" nil) (om-load-inputfun (quote input-funbox) "" "input 9" nil) (om-load-inputfun (quote input-funbox) "" "input 10" nil))) (om-make-point 622 105) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "compas 3" (quote ("elements" "compas")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil) (om-load-inputfun (quote input-funbox) "" "input 5" nil) (om-load-inputfun (quote input-funbox) "" "input 6" nil) (om-load-inputfun (quote input-funbox) "" "input 7" nil) (om-load-inputfun (quote input-funbox) "" "input 8" nil) (om-load-inputfun (quote input-funbox) "" "input 9" nil) (om-load-inputfun (quote input-funbox) "" "input 10" nil))) (om-make-point 497 175) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "compas 2" (quote ("elements" "compas")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil) (om-load-inputfun (quote input-funbox) "" "input 5" nil) (om-load-inputfun (quote input-funbox) "" "input 6" nil) (om-load-inputfun (quote input-funbox) "" "input 7" nil) (om-load-inputfun (quote input-funbox) "" "input 8" nil) (om-load-inputfun (quote input-funbox) "" "input 9" nil) (om-load-inputfun (quote input-funbox) "" "input 10" nil))) (om-make-point 191 156) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "compas" (quote ("elements" "compas")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil) (om-load-inputfun (quote input-funbox) "" "input 5" nil) (om-load-inputfun (quote input-funbox) "" "input 6" nil) (om-load-inputfun (quote input-funbox) "" "input 7" nil) (om-load-inputfun (quote input-funbox) "" "input 8" nil) (om-load-inputfun (quote input-funbox) "" "input 9" nil) (om-load-inputfun (quote input-funbox) "" "input 10" nil))) (om-make-point 41 107) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((20 0 0 0 nil 0) (20 0 19 0 nil 0) (22 0 20 0 nil 0) (21 0 20 1 nil 0) (24 0 21 0 nil 0) (23 0 21 1 nil 0) (26 0 22 0 nil 0) (25 0 22 1 nil 0) (15 0 23 1 nil 0) (8 0 23 2 nil 0) (14 0 23 4 nil 0) (12 0 23 6 nil 0) (9 0 23 7 nil 0) (14 0 23 9 nil 0) (1 0 24 0 nil 0) (16 0 24 1 nil 0) (8 0 24 2 nil 0) (3 0 24 3 nil 0) (14 0 24 4 nil 0) (5 0 24 5 nil 0) (13 0 24 6 nil 0) (7 0 24 7 nil 0) (6 0 24 8 nil 0) (14 0 24 9 nil 0) (4 0 25 0 nil 0) (17 0 25 1 nil 0) (8 0 25 2 nil 0) (3 0 25 3 nil 0) (14 0 25 4 nil 0) (2 0 25 5 nil 0) (12 0 25 6 nil 0) (9 0 25 7 nil 0) (6 0 25 8 nil 0) (14 0 25 9 nil 0) (10 0 26 0 nil 0) (18 0 26 1 nil 0) (9 0 26 2 nil 0) (6 0 26 3 nil 0) (14 0 26 4 nil 0) (5 0 26 5 nil 0) (13 0 26 6 nil 0) (7 0 26 7 nil 0) (6 0 26 8 nil 0) (14 0 26 9 nil 0))) nil 7.03))
