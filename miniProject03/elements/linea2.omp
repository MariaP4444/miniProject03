; OM File Header - Saved 2024/09/26 21:30:57
; (7.03 :patc (om-make-point 247 99) (om-make-point -7 0) (om-make-point 766 860) "" 183 0 "2024/09/26 20:21:41" "2024/09/26 20:50:19")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"compas.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "linea2" (quote ((let ((box (om-load-boxcall (quote bastype) "list 16" (quote list) (quote nil) (om-make-point 673 252) (om-make-point 156 28) (list 1200 1200 1200 1200 1200) "(1200 1200 1200 1200 1200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 15" (quote list) (quote nil) (om-make-point 651 353) (om-make-point 74 28) (list 1 1 1 -1 -1) "(1 1 1 -1 -1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 14" (quote list) (quote nil) (om-make-point 626 298) (om-make-point 108 28) (list (list (quote a2) (quote f3)) (list (quote c4)) nil nil) "((A2 F3) (C4) () ())" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 13" (quote list) (quote nil) (om-make-point 579 236) (om-make-point 16 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 12" (quote list) (quote nil) (om-make-point 543 222) (om-make-point 194 28) (list 1200 1200 1200 1200 1200 1200) "(1200 1200 1200 1200 1200 1200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 11" (quote list) (quote nil) (om-make-point 423 256) (om-make-point 140 28) (list 1/8 1/8 1/4 1/4 1/4 1/4) "(1/8 1/8 1/4 1/4 1/4 1/4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 445 187) (om-make-point 154 28) (list (list (quote b4) (quote g4)) (list (quote c5)) (list (quote d6) (quote c5)) (list (quote e6))) "((B4 G4) (C5) (D6 C5) (E6))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 269 299) (om-make-point 25 28) (list 1) "(1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 303 219) (om-make-point 77 28) (list 1/8 1/8 1 1) "(1/8 1/8 1 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 338 165) (om-make-point 124 28) (list (list (quote f2) (quote a2)) (list (quote a2) (quote f3)) nil nil) "((F2 A2) (A2 F3) () ())" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 204 227) (om-make-point 35 28) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 157 235) (om-make-point 25 28) (list 4) "(4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 349 78) (om-make-point 16 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 235 76) (om-make-point 34 28) 1200 "1200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 252 156) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 23 172) (om-make-point 60 28) (list 2 -1 1 1) "(2 -1 1 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 101 146) (om-make-point 115 28) (list (list (quote e5)) nil (list (quote c5)) (list (quote b4))) "((E5) () (C5) (B4))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CONCAT" (quote concat) (quote ((om-load-inputfun (quote input-funbox) "a musical sequence" "S1" nil) (om-load-inputfun (quote input-funbox) "a musical sequence" "S2" nil))) (om-make-point 256 492) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 279 596) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "compas 2" (quote ("elements" "compas")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil) (om-load-inputfun (quote input-funbox) "" "input 5" nil) (om-load-inputfun (quote input-funbox) "" "input 6" nil) (om-load-inputfun (quote input-funbox) "" "input 7" nil) (om-load-inputfun (quote input-funbox) "" "input 8" nil) (om-load-inputfun (quote input-funbox) "" "input 9" nil) (om-load-inputfun (quote input-funbox) "" "input 10" nil))) (om-make-point 514 309) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "compas" (quote ("elements" "compas")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil) (om-load-inputfun (quote input-funbox) "" "input 5" nil) (om-load-inputfun (quote input-funbox) "" "input 6" nil) (om-load-inputfun (quote input-funbox) "" "input 7" nil) (om-load-inputfun (quote input-funbox) "" "input 8" nil) (om-load-inputfun (quote input-funbox) "" "input 9" nil) (om-load-inputfun (quote input-funbox) "" "input 10" nil))) (om-make-point 101 318) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((13 0 14 0 nil 0) (12 0 14 1 nil 0) (20 0 17 0 nil 0) (19 0 17 1 nil 0) (17 0 18 0 nil 0) (5 0 19 0 nil 0) (6 0 19 1 nil 0) (4 0 19 2 nil 0) (3 0 19 3 nil 0) (10 0 19 4 nil 0) (1 0 19 5 nil 0) (2 0 19 6 nil 0) (0 0 19 7 nil 0) (11 0 19 8 nil 0) (10 0 19 9 nil 0) (15 0 20 0 nil 0) (16 0 20 1 nil 0) (14 0 20 2 nil 0) (11 0 20 3 nil 0) (10 0 20 4 nil 0) (8 0 20 5 nil 0) (9 0 20 6 nil 0) (14 0 20 7 nil 0) (7 0 20 8 nil 0) (10 0 20 9 nil 0))) nil 7.03))
